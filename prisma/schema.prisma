// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum IngredientCategory {
  VEGETABLE
  FRUIT
  MEAT
  FISH
  DAIRY
  GRAIN
  LEGUME
  NUT
  SPICE
  OIL
  OTHER
}

enum RecipeCategory {
  APPETIZER
  MAIN_COURSE
  SIDE_DISH
  DESSERT
  SNACK
  BEVERAGE
  BREAKFAST
  OTHER
}

enum DietType {
  VEGETARIAN
  VEGAN
  GLUTEN_FREE
  DAIRY_FREE
  KETO
  PALEO
  LOW_CARB
  OTHER
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum MineralType {
  CALCIUM
  IRON
  MAGNESIUM
  POTASSIUM
  SODIUM
  ZINC
  PHOSPHORUS
  OTHER
}

enum VitaminType {
  VITAMIN_A
  VITAMIN_B1
  VITAMIN_B2
  VITAMIN_B3
  VITAMIN_B6
  VITAMIN_B12
  VITAMIN_C
  VITAMIN_D
  VITAMIN_E
  VITAMIN_K
  OTHER
}

enum UnitType {
  GRAM
  KILOGRAM
  MILLILITER
  LITER
  TEASPOON
  TABLESPOON
  CUP
  PIECE
  SLICE
  PINCH
  OTHER
}

model ApiKey {
  id        String    @id @default(uuid())
  key       String    @unique
  name      String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  menus   Menu[]
  recipes Recipe[]
}

model Menu {
  id          String   @id @default(uuid())
  name        String
  description String?
  apiKeyId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  apiKey ApiKey?    @relation(fields: [apiKeyId], references: [id], onDelete: SetNull)
  items  MenuItem[]
}

model Recipe {
  id          String          @id @default(uuid())
  title       String
  description String?
  imageUrl    String?
  prepTimeMin Int?
  cookTimeMin Int?
  servings    Int             @default(1)
  isPublic    Boolean         @default(false)
  category    RecipeCategory?
  diet        DietType?
  apiKeyId    String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  apiKey      ApiKey?            @relation(fields: [apiKeyId], references: [id], onDelete: SetNull)
  steps       RecipeStep[]
  ingredients RecipeIngredient[]
  menuItems   MenuItem[]
}

model Ingredient {
  id       String              @id @default(uuid())
  name     String              @unique
  category IngredientCategory?

  proteins Float @default(0)
  fats     Float @default(0)
  carbs    Float @default(0)
  sugars   Float @default(0)
  fiber    Float @default(0)
  salt     Float @default(0)
  calories Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipes  RecipeIngredient[]
  minerals IngredientMineral[]
  vitamins IngredientVitamin[]
}

model IngredientMineral {
  id           String      @id @default(uuid())
  ingredientId String
  mineralType  MineralType
  value        Float

  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@unique([ingredientId, mineralType])
}

model IngredientVitamin {
  id           String      @id @default(uuid())
  ingredientId String
  vitaminType  VitaminType
  value        Float

  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@unique([ingredientId, vitaminType])
}

model MenuItem {
  id        String   @id @default(uuid())
  menuId    String
  recipeId  String
  mealType  MealType
  order     Int
  dayNumber Int      @default(1)

  menu   Menu   @relation(fields: [menuId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([menuId, mealType, dayNumber, order])
}

model RecipeStep {
  id          String @id @default(uuid())
  recipeId    String
  order       Int
  instruction String
  durationMin Int?

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, order])
}

model RecipeIngredient {
  recipeId     String
  ingredientId String
  quantity     Float
  unit         UnitType @default(GRAM)
  notes        String?

  recipe     Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@id([recipeId, ingredientId])
}
